from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards.start_menu_keyboard import start_menu_kb

from database.db import session_factory
from database.models.user import UserORM
from sqlalchemy import select

from datetime import datetime


router = Router()

@router.message(F.text=="/start")
async def start_processing(message: Message, state: FSMContext):

    user_id = message.from_user.id
    async with session_factory() as session:
        query = select(UserORM).filter(UserORM.tg_id == user_id)
        result = await session.execute(query)
        user = result.scalar()
        if not user:
            new_user = UserORM(
                tg_id=user_id,
                join_date=datetime.utcnow()
            )
            session.add(new_user)
            await session.commit()

    user_first_name = message.chat.first_name
    await message.answer(
        text=f"üñê <b>–ü—Ä–∏–≤–µ—Ç, {user_first_name}</b>",
        reply_markup=start_menu_kb,
        parse_mode="HTML"
    )
    await state.clear()

@router.message(F.text=="/help")
async def help_information(message: Message):

    user_id = message.from_user.id
    async with session_factory() as session:
        query = select(UserORM).filter(UserORM.tg_id == user_id)
        result = await session.execute(query)
        user = result.scalar()
        if not user:
            new_user = UserORM(
                tg_id=user_id,
                join_date=datetime.utcnow()
            )
            session.add(new_user)
            await session.commit()

    await message.answer(
        text=(
            f"ü§ì <b>–≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å ¬´–õ–µ–∫–≤–∏–µ–π¬ª</b>\n\n"
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:</b>\n"
            "¬´–õ–µ–∫–≤–∏—è¬ª - –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å –ª–µ–∫—Ü–∏–π! "
            "–ó–∞–±—É–¥—å—Ç–µ –æ –±–µ—Å–ø–æ—Ä—è–¥–∫–µ –≤ –≥–∞–ª–µ—Ä–µ–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª–µ–∫—Ü–∏–∏ –≤ –±–æ—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏ –≤–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –ø–æ–¥ —Ä—É–∫–æ–π\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–µ, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å –∏–ª–∏ –Ω–µ –æ—Ç–µ—á–∞–µ—Ç –≤–∞–º\n"
            "‚Ä¢ /help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n"
            "<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∂–¥—É —Ç—É—Ç -> @SergeyMakhov111"
        ),
        parse_mode="HTML",
        reply_markup=start_menu_kb
    )

@router.callback_query(F.data=="—Åancel_button")
async def cancel_processing(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text=f"üòä <b>–í—ã–±–µ—Ä–∏ –¥–µ—Å—Ç–≤–∏–µ</b>",
        reply_markup=start_menu_kb,
        parse_mode="HTML"
    )
    await state.clear()

@router.callback_query(F.data=="return_to_menu_button")
async def cancel_processing(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text=f"üòä <b>–í—ã–±–µ—Ä–∏ –¥–µ—Å—Ç–≤–∏–µ</b>",
        reply_markup=start_menu_kb,
        parse_mode="HTML"
    )
    await state.clear()



